#!/usr/bin/env python
import os
import sys
import argparse
import mechanize
import ConfigParser
import cPickle as pickle

import transcode
import whatbrowser

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('release_urls', nargs='*', help='the URL where the release is located')
    parser.add_argument('-A', '--auto', action='store_true', help='attempt to automatically find transcode candidates')
    parser.add_argument('-a', '--all', action='store_true', help='search through all snatched torrents for transcode candidates')
    parser.add_argument('-s', '--single', action='store_true', help='only add one format per release (useful for getting unique groups)')
    parser.add_argument('--config', help='the location of the configuration file (default: ~/.whatbetter/config)', \
            default = os.path.expanduser('~/.whatbetter/config'))
    parser.add_argument('--cache', help='the location of the cache (default: ~/.whatbetter/cache)', \
                        default=os.path.expanduser('~/.whatbetter/cache'))

    args = parser.parse_args()

    config = ConfigParser.SafeConfigParser()
    try:
        open(args.config)
        config.read(args.config)
    except:
        if not os.path.exists(os.path.dirname(args.config)):
            os.makedirs(os.path.dirname(args.config))
        config.add_section('whatcd')
        config.set('whatcd', 'username', '')
        config.set('whatcd', 'password', '')
        config.set('whatcd', 'passkey', '')
        config.set('whatcd', 'data_dir', '')
        config.set('whatcd', 'torrent_dir', '')
        config.write(open(args.config, 'w'))
        print('Please edit the configuration file: %s' % args.config)
        sys.exit(2)
    finally:
        username = config.get('whatcd', 'username')
        password = config.get('whatcd', 'password')
        passkey = config.get('whatcd', 'passkey')
        data_dir = os.path.expanduser(config.get('whatcd', 'data_dir'))
        torrent_dir = os.path.expanduser(config.get('whatcd', 'torrent_dir'))

    print('Logging in to What.CD...')
    browser = whatbrowser.WhatBrowser(username, password, passkey=passkey, data_dir=data_dir, torrent_dir=torrent_dir)

    # cache
    try:
        seen = pickle.load(open(args.cache))
    except:
        seen = set()
        pickle.dump(seen, open(args.cache, 'wb'))

    print('Searching for transcode candidates...')
    if args.all:
        releases = browser.snatched(format='FLAC', skip=seen)
    elif args.auto:
        releases = browser.transcode_candidates(skip=seen)
    elif len(args.release_urls) == 0:
        print("No release urls specified; assuming --auto")
        releases = browser.transcode_candidates(skip=seen)
    else:
        releases = (browser.get_release(url) for url in args.release_urls)

    for release in releases:
        codecs = release.formats_needed()
        print
        print("Release found: %s" % release.title)
        print("Formats needed: %s" % ', '.join(codecs))

        for codec in codecs:
            if os.path.exists(release.flac_dir):
                print('Adding format %s...' % codec)
                try:
                    release.add_format(codec)
                    if args.single: break
                except Exception as e:
                    print "Error adding format %s: %s" % (codec, e)
            else:
                print("Path not found - skipping: %s" % release.flac_dir)
                break
        seen.add(release.id)
        pickle.dump(seen, open(args.cache, 'wb'))

if __name__ == "__main__":
    main()
